override func drag(_ event: NSEvent, type: EventSendType) {
        let p = convertPointToInternal(point(from: event))
        switch type {
        case .begin:
            let cut = cutsEntity.cutEntitys[cutIndex(with: p.x)].cut
            if p.y > bounds.height - _timeHeight {
                isGroupDrag = true
                dragGroup(event, type: type)
                return
            }
        case .sending:
            if isGroupDrag {
                dragGroup(event, type: type)
                return
            }
        case .end:
            if isGroupDrag {
                dragGroup(event, type: type)
                isGroupDrag = false
                return
            }
    }
}
let itemHeight = 8.0.cf
private var oldIndex = 0, oldP = CGPoint()
func dragGroup(_ event: NSEvent, type: EventSendType) {
    let cut = sceneView.cutView.cut
    let p = point(from: event)
    switch type {
    case .begin:
        oldIndex = cut.editGroupIndex
        oldP = p
    case .sending:
        let d = p.y - oldP.y
        let i = (oldIndex + Int(d/itemHeight)).clip(min: 0, max: cut.groups.count - 1)
        if cut.editGroupIndex != i {
            cut.editGroup = cut.groups[i]
            layer.setNeedsDisplay()
            sceneView.cutView.setNeedsDisplay()
            sceneView.timeline.setNeedsDisplay()
            sceneView.keyframeView.update()
            sceneView.cameraView.update()
        }
    case .end:
        let d = p.y - oldP.y
        let i = (oldIndex + Int(d/itemHeight)).clip(min: 0, max: cut.groups.count - 1)
        if oldIndex != i {
            _setEditGroup(cut.groups[i], oldGroup: cut.groups[oldIndex], inCutEntity: sceneView.cutView.cutEntity)
        } else if cut.editGroupIndex != i {
            cut.editGroup = cut.groups[i]
            layer.setNeedsDisplay()
            sceneView.cutView.setNeedsDisplay()
            sceneView.timeline.setNeedsDisplay()
            sceneView.keyframeView.update()
            sceneView.cameraView.update()
        }
    }
}
private func _setEditGroup(_ group: Group, oldGroup: Group, inCutEntity: CutEntity) {
    undoManager?.registerUndo(withTarget: self) { $0._setEditGroup(oldGroup, oldGroup: group, inCutEntity: inCutEntity) }
    inCutEntity.cut.editGroup = group
    inCutEntity.isUpdate = true
    layer.setNeedsDisplay()
    sceneView.cutView.setNeedsDisplay()
    sceneView.timeline.setNeedsDisplay()
    sceneView.keyframeView.update()
    sceneView.cameraView.update()
}
